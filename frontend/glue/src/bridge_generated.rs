#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::mirror::Album;
use crate::mirror::Albums;
use crate::mirror::Artist;
use crate::mirror::CoverArt;
use crate::mirror::Track;
use crate::mirror::UploadReturn;
use crate::server::folder::FakeMapItem;

// Section: wire functions

fn wire_new_mio_client_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "new_mio_client",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(new_mio_client()),
    )
}
fn wire_get_url__method__MioClient_impl(
    that: impl Wire2Api<MioClient> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_url__method__MioClient",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Ok(MioClient::get_url(&api_that))
        },
    )
}
fn wire_test_set_url__method__MioClient_impl(
    port_: MessagePort,
    that: impl Wire2Api<MioClient> + UnwindSafe,
    url: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_set_url__method__MioClient",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_url = url.wire2api();
            move |task_callback| MioClient::test_set_url(&api_that, api_url)
        },
    )
}
fn wire_attempt_signup_and_login__method__MioClient_impl(
    port_: MessagePort,
    that: impl Wire2Api<MioClient> + UnwindSafe,
    username: impl Wire2Api<String> + UnwindSafe,
    password: impl Wire2Api<String> + UnwindSafe,
    password2: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "attempt_signup_and_login__method__MioClient",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_username = username.wire2api();
            let api_password = password.wire2api();
            let api_password2 = password2.wire2api();
            move |task_callback| {
                MioClient::attempt_signup_and_login(
                    &api_that,
                    api_username,
                    api_password,
                    api_password2,
                )
            }
        },
    )
}
fn wire_attempt_login__method__MioClient_impl(
    port_: MessagePort,
    that: impl Wire2Api<MioClient> + UnwindSafe,
    username: impl Wire2Api<String> + UnwindSafe,
    password: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "attempt_login__method__MioClient",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_username = username.wire2api();
            let api_password = password.wire2api();
            move |task_callback| MioClient::attempt_login(&api_that, api_username, api_password)
        },
    )
}
fn wire_get_albums__method__MioClient_impl(
    port_: MessagePort,
    that: impl Wire2Api<MioClient> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_albums__method__MioClient",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(mirror_Albums(MioClient::get_albums(&api_that)?))
        },
    )
}
fn wire_get_album__method__MioClient_impl(
    port_: MessagePort,
    that: impl Wire2Api<MioClient> + UnwindSafe,
    id: impl Wire2Api<uuid::Uuid> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_album__method__MioClient",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_id = id.wire2api();
            move |task_callback| Ok(mirror_Album(MioClient::get_album(&api_that, api_id)?))
        },
    )
}
fn wire_get_track__method__MioClient_impl(
    port_: MessagePort,
    that: impl Wire2Api<MioClient> + UnwindSafe,
    id: impl Wire2Api<uuid::Uuid> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_track__method__MioClient",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_id = id.wire2api();
            move |task_callback| Ok(mirror_Track(MioClient::get_track(&api_that, api_id)?))
        },
    )
}
fn wire_get_artist__method__MioClient_impl(
    port_: MessagePort,
    that: impl Wire2Api<MioClient> + UnwindSafe,
    id: impl Wire2Api<uuid::Uuid> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_artist__method__MioClient",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_id = id.wire2api();
            move |task_callback| Ok(mirror_Artist(MioClient::get_artist(&api_that, api_id)?))
        },
    )
}
fn wire_get_cover_art__method__MioClient_impl(
    port_: MessagePort,
    that: impl Wire2Api<MioClient> + UnwindSafe,
    id: impl Wire2Api<uuid::Uuid> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_cover_art__method__MioClient",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_id = id.wire2api();
            move |task_callback| {
                Ok(mirror_CoverArt(MioClient::get_cover_art(
                    &api_that, api_id,
                )?))
            }
        },
    )
}
fn wire_get_files_at_dir__method__MioClient_impl(
    port_: MessagePort,
    that: impl Wire2Api<MioClient> + UnwindSafe,
    path: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_files_at_dir__method__MioClient",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_path = path.wire2api();
            move |task_callback| MioClient::get_files_at_dir(&api_that, api_path)
        },
    )
}
fn wire_upload_file__method__MioClient_impl(
    port_: MessagePort,
    that: impl Wire2Api<MioClient> + UnwindSafe,
    fullpath: impl Wire2Api<String> + UnwindSafe,
    dir: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "upload_file__method__MioClient",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_fullpath = fullpath.wire2api();
            let api_dir = dir.wire2api();
            move |task_callback| {
                Ok(mirror_UploadReturn(MioClient::upload_file(
                    &api_that,
                    api_fullpath,
                    api_dir,
                )?))
            }
        },
    )
}
fn wire_get_folders__method__MioClient_impl(
    port_: MessagePort,
    that: impl Wire2Api<MioClient> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_folders__method__MioClient",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| MioClient::get_folders(&api_that)
        },
    )
}
fn wire_make_dir__method__MioClient_impl(
    port_: MessagePort,
    that: impl Wire2Api<MioClient> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
    path: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "make_dir__method__MioClient",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_name = name.wire2api();
            let api_path = path.wire2api();
            move |task_callback| MioClient::make_dir(&api_that, api_name, api_path)
        },
    )
}
// Section: wrapper structs

#[derive(Clone)]
struct mirror_Album(Album);

#[derive(Clone)]
struct mirror_Albums(Albums);

#[derive(Clone)]
struct mirror_Artist(Artist);

#[derive(Clone)]
struct mirror_CoverArt(CoverArt);

#[derive(Clone)]
struct mirror_Track(Track);

#[derive(Clone)]
struct mirror_UploadReturn(UploadReturn);

// Section: static checks

const _: fn() = || {
    {
        let Album = None::<Album>.unwrap();
        let _: uuid::Uuid = Album.id;
        let _: String = Album.title;
        let _: Vec<uuid::Uuid> = Album.tracks;
    }
    {
        let Albums = None::<Albums>.unwrap();
        let _: Vec<uuid::Uuid> = Albums.albums;
    }
    {
        let Artist = None::<Artist>.unwrap();
        let _: uuid::Uuid = Artist.id;
        let _: String = Artist.name;
        let _: Option<String> = Artist.sort_name;
    }
    {
        let CoverArt = None::<CoverArt>.unwrap();
        let _: uuid::Uuid = CoverArt.id;
        let _: Vec<u8> = CoverArt.webm_blob;
    }
    {
        let Track = None::<Track>.unwrap();
        let _: uuid::Uuid = Track.id;
        let _: Option<uuid::Uuid> = Track.album;
        let _: Option<uuid::Uuid> = Track.cover_art;
        let _: Option<uuid::Uuid> = Track.artist;
        let _: String = Track.title;
        let _: Option<i64> = Track.disk;
        let _: Option<i64> = Track.track;
    }
    {
        let UploadReturn = None::<UploadReturn>.unwrap();
        let _: uuid::Uuid = UploadReturn.uuid;
    }
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for mirror_Album {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.id.into_dart(),
            self.0.title.into_dart(),
            self.0.tracks.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_Album {}

impl support::IntoDart for mirror_Albums {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.albums.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_Albums {}

impl support::IntoDart for mirror_Artist {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.id.into_dart(),
            self.0.name.into_dart(),
            self.0.sort_name.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_Artist {}

impl support::IntoDart for mirror_CoverArt {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.id.into_dart(), self.0.webm_blob.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_CoverArt {}

impl support::IntoDart for FakeMapItem {
    fn into_dart(self) -> support::DartAbi {
        vec![self.key.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for FakeMapItem {}

impl support::IntoDart for MioClient {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MioClient {}

impl support::IntoDart for mirror_Track {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.id.into_dart(),
            self.0.album.into_dart(),
            self.0.cover_art.into_dart(),
            self.0.artist.into_dart(),
            self.0.title.into_dart(),
            self.0.disk.into_dart(),
            self.0.track.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_Track {}

impl support::IntoDart for mirror_UploadReturn {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.uuid.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_UploadReturn {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
