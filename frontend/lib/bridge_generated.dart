// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.79.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class MioGlue {
  MioClient newMioClient({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewMioClientConstMeta;

  MioPlayer newPlayer({required MioClient client, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewPlayerConstMeta;

  Stream<PStatus> infoStreamMethodMioPlayer(
      {required MioPlayer that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInfoStreamMethodMioPlayerConstMeta;

  void playMethodMioPlayer(
      {required MioPlayer that, UuidValue? id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPlayMethodMioPlayerConstMeta;

  void pauseMethodMioPlayer({required MioPlayer that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPauseMethodMioPlayerConstMeta;

  void toggleMethodMioPlayer({required MioPlayer that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToggleMethodMioPlayerConstMeta;

  void queueMethodMioPlayer(
      {required MioPlayer that, required UuidValue id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kQueueMethodMioPlayerConstMeta;

  void unqueueMethodMioPlayer(
      {required MioPlayer that, required UuidValue id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUnqueueMethodMioPlayerConstMeta;

  void stopMethodMioPlayer({required MioPlayer that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopMethodMioPlayerConstMeta;

  void forwardMethodMioPlayer({required MioPlayer that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kForwardMethodMioPlayerConstMeta;

  void volumeMethodMioPlayer(
      {required MioPlayer that, required double volume, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVolumeMethodMioPlayerConstMeta;

  String getUrlMethodMioClient({required MioClient that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetUrlMethodMioClientConstMeta;

  Future<void> testSetUrlMethodMioClient(
      {required MioClient that, required String url, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestSetUrlMethodMioClientConstMeta;

  Future<void> attemptSignupAndLoginMethodMioClient(
      {required MioClient that,
      required String username,
      required String password,
      required String password2,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kAttemptSignupAndLoginMethodMioClientConstMeta;

  Future<void> attemptLoginMethodMioClient(
      {required MioClient that,
      required String username,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAttemptLoginMethodMioClientConstMeta;

  Future<Albums> getAlbumsMethodMioClient(
      {required MioClient that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAlbumsMethodMioClientConstMeta;

  Future<Album> getAlbumMethodMioClient(
      {required MioClient that, required UuidValue id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAlbumMethodMioClientConstMeta;

  Future<Track> getTrackMethodMioClient(
      {required MioClient that, required UuidValue id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTrackMethodMioClientConstMeta;

  Future<Artist> getArtistMethodMioClient(
      {required MioClient that, required UuidValue id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetArtistMethodMioClientConstMeta;

  Future<CoverArt> getCoverArtMethodMioClient(
      {required MioClient that, required UuidValue id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetCoverArtMethodMioClientConstMeta;

  Future<List<String>> getFilesAtDirMethodMioClient(
      {required MioClient that, required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetFilesAtDirMethodMioClientConstMeta;

  Future<UploadReturn> uploadFileMethodMioClient(
      {required MioClient that,
      required String fullpath,
      required String dir,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUploadFileMethodMioClientConstMeta;

  Future<List<FakeMapItem>> getFoldersMethodMioClient(
      {required MioClient that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetFoldersMethodMioClientConstMeta;

  Future<void> makeDirMethodMioClient(
      {required MioClient that,
      required String name,
      required String path,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMakeDirMethodMioClientConstMeta;

  DropFnType get dropOpaqueArcRwLockMioClientState;
  ShareFnType get shareOpaqueArcRwLockMioClientState;
  OpaqueTypeFinalizer get ArcRwLockMioClientStateFinalizer;

  DropFnType get dropOpaquePlayer;
  ShareFnType get shareOpaquePlayer;
  OpaqueTypeFinalizer get PlayerFinalizer;
}

@sealed
class ArcRwLockMioClientState extends FrbOpaque {
  final MioGlue bridge;
  ArcRwLockMioClientState.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcRwLockMioClientState;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcRwLockMioClientState;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcRwLockMioClientStateFinalizer;
}

@sealed
class Player extends FrbOpaque {
  final MioGlue bridge;
  Player.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaquePlayer;

  @override
  ShareFnType get shareFn => bridge.shareOpaquePlayer;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.PlayerFinalizer;
}

class Album {
  final UuidValue id;
  final String title;
  final List<UuidValue> tracks;

  const Album({
    required this.id,
    required this.title,
    required this.tracks,
  });
}

class Albums {
  final List<UuidValue> albums;

  const Albums({
    required this.albums,
  });
}

class Artist {
  final UuidValue id;
  final String name;
  final String? sortName;

  const Artist({
    required this.id,
    required this.name,
    this.sortName,
  });
}

class CoverArt {
  final UuidValue id;
  final Uint8List webmBlob;

  const CoverArt({
    required this.id,
    required this.webmBlob,
  });
}

class FakeMapItem {
  final String key;
  final List<FakeMapItem>? value;

  const FakeMapItem({
    required this.key,
    this.value,
  });
}

class MioClient {
  final MioGlue bridge;
  final ArcRwLockMioClientState field0;

  const MioClient({
    required this.bridge,
    required this.field0,
  });

  String getUrl({dynamic hint}) => bridge.getUrlMethodMioClient(
        that: this,
      );

  Future<void> testSetUrl({required String url, dynamic hint}) =>
      bridge.testSetUrlMethodMioClient(
        that: this,
        url: url,
      );

  Future<void> attemptSignupAndLogin(
          {required String username,
          required String password,
          required String password2,
          dynamic hint}) =>
      bridge.attemptSignupAndLoginMethodMioClient(
        that: this,
        username: username,
        password: password,
        password2: password2,
      );

  Future<void> attemptLogin(
          {required String username, required String password, dynamic hint}) =>
      bridge.attemptLoginMethodMioClient(
        that: this,
        username: username,
        password: password,
      );

  Future<Albums> getAlbums({dynamic hint}) => bridge.getAlbumsMethodMioClient(
        that: this,
      );

  Future<Album> getAlbum({required UuidValue id, dynamic hint}) =>
      bridge.getAlbumMethodMioClient(
        that: this,
        id: id,
      );

  Future<Track> getTrack({required UuidValue id, dynamic hint}) =>
      bridge.getTrackMethodMioClient(
        that: this,
        id: id,
      );

  Future<Artist> getArtist({required UuidValue id, dynamic hint}) =>
      bridge.getArtistMethodMioClient(
        that: this,
        id: id,
      );

  Future<CoverArt> getCoverArt({required UuidValue id, dynamic hint}) =>
      bridge.getCoverArtMethodMioClient(
        that: this,
        id: id,
      );

  Future<List<String>> getFilesAtDir({required String path, dynamic hint}) =>
      bridge.getFilesAtDirMethodMioClient(
        that: this,
        path: path,
      );

  Future<UploadReturn> uploadFile(
          {required String fullpath, required String dir, dynamic hint}) =>
      bridge.uploadFileMethodMioClient(
        that: this,
        fullpath: fullpath,
        dir: dir,
      );

  Future<List<FakeMapItem>> getFolders({dynamic hint}) =>
      bridge.getFoldersMethodMioClient(
        that: this,
      );

  Future<void> makeDir(
          {required String name, required String path, dynamic hint}) =>
      bridge.makeDirMethodMioClient(
        that: this,
        name: name,
        path: path,
      );
}

class MioPlayer {
  final MioGlue bridge;
  final Player field0;

  const MioPlayer({
    required this.bridge,
    required this.field0,
  });

  Stream<PStatus> infoStream({dynamic hint}) =>
      bridge.infoStreamMethodMioPlayer(
        that: this,
      );

  void play({UuidValue? id, dynamic hint}) => bridge.playMethodMioPlayer(
        that: this,
        id: id,
      );

  void pause({dynamic hint}) => bridge.pauseMethodMioPlayer(
        that: this,
      );

  void toggle({dynamic hint}) => bridge.toggleMethodMioPlayer(
        that: this,
      );

  void queue({required UuidValue id, dynamic hint}) =>
      bridge.queueMethodMioPlayer(
        that: this,
        id: id,
      );

  void unqueue({required UuidValue id, dynamic hint}) =>
      bridge.unqueueMethodMioPlayer(
        that: this,
        id: id,
      );

  void stop({dynamic hint}) => bridge.stopMethodMioPlayer(
        that: this,
      );

  void forward({dynamic hint}) => bridge.forwardMethodMioPlayer(
        that: this,
      );

  void volume({required double volume, dynamic hint}) =>
      bridge.volumeMethodMioPlayer(
        that: this,
        volume: volume,
      );
}

class PStatus {
  final String? errMsg;
  final List<UuidValue> queue;
  final double volume;
  final bool paused;

  const PStatus({
    this.errMsg,
    required this.queue,
    required this.volume,
    required this.paused,
  });
}

class Track {
  final UuidValue id;
  final UuidValue? album;
  final UuidValue? coverArt;
  final UuidValue? artist;
  final String title;
  final int? disk;
  final int? track;

  const Track({
    required this.id,
    this.album,
    this.coverArt,
    this.artist,
    required this.title,
    this.disk,
    this.track,
  });
}

class UploadReturn {
  final UuidValue uuid;

  const UploadReturn({
    required this.uuid,
  });
}

class MioGlueImpl implements MioGlue {
  final MioGluePlatform _platform;
  factory MioGlueImpl(ExternalLibrary dylib) =>
      MioGlueImpl.raw(MioGluePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory MioGlueImpl.wasm(FutureOr<WasmModule> module) =>
      MioGlueImpl(module as ExternalLibrary);
  MioGlueImpl.raw(this._platform);
  MioClient newMioClient({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_new_mio_client(),
      parseSuccessData: _wire2api_mio_client,
      constMeta: kNewMioClientConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewMioClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_mio_client",
        argNames: [],
      );

  MioPlayer newPlayer({required MioClient client, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(client);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_new_player(arg0),
      parseSuccessData: _wire2api_mio_player,
      constMeta: kNewPlayerConstMeta,
      argValues: [client],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewPlayerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_player",
        argNames: ["client"],
      );

  Stream<PStatus> infoStreamMethodMioPlayer(
      {required MioPlayer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_player(that);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_info_stream__method__MioPlayer(port_, arg0),
      parseSuccessData: _wire2api_p_status,
      constMeta: kInfoStreamMethodMioPlayerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInfoStreamMethodMioPlayerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "info_stream__method__MioPlayer",
        argNames: ["that"],
      );

  void playMethodMioPlayer(
      {required MioPlayer that, UuidValue? id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_player(that);
    var arg1 = _platform.api2wire_opt_Uuid(id);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_play__method__MioPlayer(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kPlayMethodMioPlayerConstMeta,
      argValues: [that, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPlayMethodMioPlayerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "play__method__MioPlayer",
        argNames: ["that", "id"],
      );

  void pauseMethodMioPlayer({required MioPlayer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_player(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_pause__method__MioPlayer(arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kPauseMethodMioPlayerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPauseMethodMioPlayerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pause__method__MioPlayer",
        argNames: ["that"],
      );

  void toggleMethodMioPlayer({required MioPlayer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_player(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_toggle__method__MioPlayer(arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kToggleMethodMioPlayerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kToggleMethodMioPlayerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "toggle__method__MioPlayer",
        argNames: ["that"],
      );

  void queueMethodMioPlayer(
      {required MioPlayer that, required UuidValue id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_player(that);
    var arg1 = _platform.api2wire_Uuid(id);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_queue__method__MioPlayer(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kQueueMethodMioPlayerConstMeta,
      argValues: [that, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kQueueMethodMioPlayerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "queue__method__MioPlayer",
        argNames: ["that", "id"],
      );

  void unqueueMethodMioPlayer(
      {required MioPlayer that, required UuidValue id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_player(that);
    var arg1 = _platform.api2wire_Uuid(id);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_unqueue__method__MioPlayer(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kUnqueueMethodMioPlayerConstMeta,
      argValues: [that, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnqueueMethodMioPlayerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "unqueue__method__MioPlayer",
        argNames: ["that", "id"],
      );

  void stopMethodMioPlayer({required MioPlayer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_player(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_stop__method__MioPlayer(arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kStopMethodMioPlayerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStopMethodMioPlayerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stop__method__MioPlayer",
        argNames: ["that"],
      );

  void forwardMethodMioPlayer({required MioPlayer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_player(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_forward__method__MioPlayer(arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kForwardMethodMioPlayerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kForwardMethodMioPlayerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "forward__method__MioPlayer",
        argNames: ["that"],
      );

  void volumeMethodMioPlayer(
      {required MioPlayer that, required double volume, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_player(that);
    var arg1 = api2wire_f32(volume);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_volume__method__MioPlayer(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kVolumeMethodMioPlayerConstMeta,
      argValues: [that, volume],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVolumeMethodMioPlayerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "volume__method__MioPlayer",
        argNames: ["that", "volume"],
      );

  String getUrlMethodMioClient({required MioClient that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_get_url__method__MioClient(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGetUrlMethodMioClientConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetUrlMethodMioClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_url__method__MioClient",
        argNames: ["that"],
      );

  Future<void> testSetUrlMethodMioClient(
      {required MioClient that, required String url, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(that);
    var arg1 = _platform.api2wire_String(url);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_test_set_url__method__MioClient(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kTestSetUrlMethodMioClientConstMeta,
      argValues: [that, url],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestSetUrlMethodMioClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_set_url__method__MioClient",
        argNames: ["that", "url"],
      );

  Future<void> attemptSignupAndLoginMethodMioClient(
      {required MioClient that,
      required String username,
      required String password,
      required String password2,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(that);
    var arg1 = _platform.api2wire_String(username);
    var arg2 = _platform.api2wire_String(password);
    var arg3 = _platform.api2wire_String(password2);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_attempt_signup_and_login__method__MioClient(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kAttemptSignupAndLoginMethodMioClientConstMeta,
      argValues: [that, username, password, password2],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAttemptSignupAndLoginMethodMioClientConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "attempt_signup_and_login__method__MioClient",
            argNames: ["that", "username", "password", "password2"],
          );

  Future<void> attemptLoginMethodMioClient(
      {required MioClient that,
      required String username,
      required String password,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(that);
    var arg1 = _platform.api2wire_String(username);
    var arg2 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_attempt_login__method__MioClient(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kAttemptLoginMethodMioClientConstMeta,
      argValues: [that, username, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAttemptLoginMethodMioClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "attempt_login__method__MioClient",
        argNames: ["that", "username", "password"],
      );

  Future<Albums> getAlbumsMethodMioClient(
      {required MioClient that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_albums__method__MioClient(port_, arg0),
      parseSuccessData: _wire2api_albums,
      constMeta: kGetAlbumsMethodMioClientConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAlbumsMethodMioClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_albums__method__MioClient",
        argNames: ["that"],
      );

  Future<Album> getAlbumMethodMioClient(
      {required MioClient that, required UuidValue id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(that);
    var arg1 = _platform.api2wire_Uuid(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_album__method__MioClient(port_, arg0, arg1),
      parseSuccessData: _wire2api_album,
      constMeta: kGetAlbumMethodMioClientConstMeta,
      argValues: [that, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAlbumMethodMioClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_album__method__MioClient",
        argNames: ["that", "id"],
      );

  Future<Track> getTrackMethodMioClient(
      {required MioClient that, required UuidValue id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(that);
    var arg1 = _platform.api2wire_Uuid(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_track__method__MioClient(port_, arg0, arg1),
      parseSuccessData: _wire2api_track,
      constMeta: kGetTrackMethodMioClientConstMeta,
      argValues: [that, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetTrackMethodMioClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_track__method__MioClient",
        argNames: ["that", "id"],
      );

  Future<Artist> getArtistMethodMioClient(
      {required MioClient that, required UuidValue id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(that);
    var arg1 = _platform.api2wire_Uuid(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_artist__method__MioClient(port_, arg0, arg1),
      parseSuccessData: _wire2api_artist,
      constMeta: kGetArtistMethodMioClientConstMeta,
      argValues: [that, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetArtistMethodMioClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_artist__method__MioClient",
        argNames: ["that", "id"],
      );

  Future<CoverArt> getCoverArtMethodMioClient(
      {required MioClient that, required UuidValue id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(that);
    var arg1 = _platform.api2wire_Uuid(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_cover_art__method__MioClient(port_, arg0, arg1),
      parseSuccessData: _wire2api_cover_art,
      constMeta: kGetCoverArtMethodMioClientConstMeta,
      argValues: [that, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetCoverArtMethodMioClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_cover_art__method__MioClient",
        argNames: ["that", "id"],
      );

  Future<List<String>> getFilesAtDirMethodMioClient(
      {required MioClient that, required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(that);
    var arg1 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_files_at_dir__method__MioClient(port_, arg0, arg1),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetFilesAtDirMethodMioClientConstMeta,
      argValues: [that, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetFilesAtDirMethodMioClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_files_at_dir__method__MioClient",
        argNames: ["that", "path"],
      );

  Future<UploadReturn> uploadFileMethodMioClient(
      {required MioClient that,
      required String fullpath,
      required String dir,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(that);
    var arg1 = _platform.api2wire_String(fullpath);
    var arg2 = _platform.api2wire_String(dir);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_upload_file__method__MioClient(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_upload_return,
      constMeta: kUploadFileMethodMioClientConstMeta,
      argValues: [that, fullpath, dir],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUploadFileMethodMioClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "upload_file__method__MioClient",
        argNames: ["that", "fullpath", "dir"],
      );

  Future<List<FakeMapItem>> getFoldersMethodMioClient(
      {required MioClient that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_folders__method__MioClient(port_, arg0),
      parseSuccessData: _wire2api_list_fake_map_item,
      constMeta: kGetFoldersMethodMioClientConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetFoldersMethodMioClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_folders__method__MioClient",
        argNames: ["that"],
      );

  Future<void> makeDirMethodMioClient(
      {required MioClient that,
      required String name,
      required String path,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mio_client(that);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_make_dir__method__MioClient(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kMakeDirMethodMioClientConstMeta,
      argValues: [that, name, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMakeDirMethodMioClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "make_dir__method__MioClient",
        argNames: ["that", "name", "path"],
      );

  DropFnType get dropOpaqueArcRwLockMioClientState =>
      _platform.inner.drop_opaque_ArcRwLockMioClientState;
  ShareFnType get shareOpaqueArcRwLockMioClientState =>
      _platform.inner.share_opaque_ArcRwLockMioClientState;
  OpaqueTypeFinalizer get ArcRwLockMioClientStateFinalizer =>
      _platform.ArcRwLockMioClientStateFinalizer;

  DropFnType get dropOpaquePlayer => _platform.inner.drop_opaque_Player;
  ShareFnType get shareOpaquePlayer => _platform.inner.share_opaque_Player;
  OpaqueTypeFinalizer get PlayerFinalizer => _platform.PlayerFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  ArcRwLockMioClientState _wire2api_ArcRwLockMioClientState(dynamic raw) {
    return ArcRwLockMioClientState.fromRaw(raw[0], raw[1], this);
  }

  Player _wire2api_Player(dynamic raw) {
    return Player.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  UuidValue _wire2api_Uuid(dynamic raw) {
    return UuidValue.fromByteList(_wire2api_uint_8_list(raw));
  }

  List<UuidValue> _wire2api_Uuids(dynamic raw) {
    final bytes = _wire2api_uint_8_list(raw);
    return wire2apiUuids(bytes);
  }

  Album _wire2api_album(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Album(
      id: _wire2api_Uuid(arr[0]),
      title: _wire2api_String(arr[1]),
      tracks: _wire2api_Uuids(arr[2]),
    );
  }

  Albums _wire2api_albums(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Albums(
      albums: _wire2api_Uuids(arr[0]),
    );
  }

  Artist _wire2api_artist(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Artist(
      id: _wire2api_Uuid(arr[0]),
      name: _wire2api_String(arr[1]),
      sortName: _wire2api_opt_String(arr[2]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_box_autoadd_i64(dynamic raw) {
    return _wire2api_i64(raw);
  }

  CoverArt _wire2api_cover_art(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CoverArt(
      id: _wire2api_Uuid(arr[0]),
      webmBlob: _wire2api_uint_8_list(arr[1]),
    );
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  FakeMapItem _wire2api_fake_map_item(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FakeMapItem(
      key: _wire2api_String(arr[0]),
      value: _wire2api_opt_list_fake_map_item(arr[1]),
    );
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<FakeMapItem> _wire2api_list_fake_map_item(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_fake_map_item).toList();
  }

  MioClient _wire2api_mio_client(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MioClient(
      bridge: this,
      field0: _wire2api_ArcRwLockMioClientState(arr[0]),
    );
  }

  MioPlayer _wire2api_mio_player(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MioPlayer(
      bridge: this,
      field0: _wire2api_Player(arr[0]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  UuidValue? _wire2api_opt_Uuid(dynamic raw) {
    return raw == null ? null : _wire2api_Uuid(raw);
  }

  int? _wire2api_opt_box_autoadd_i64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_i64(raw);
  }

  List<FakeMapItem>? _wire2api_opt_list_fake_map_item(dynamic raw) {
    return raw == null ? null : _wire2api_list_fake_map_item(raw);
  }

  PStatus _wire2api_p_status(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return PStatus(
      errMsg: _wire2api_opt_String(arr[0]),
      queue: _wire2api_Uuids(arr[1]),
      volume: _wire2api_f32(arr[2]),
      paused: _wire2api_bool(arr[3]),
    );
  }

  Track _wire2api_track(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return Track(
      id: _wire2api_Uuid(arr[0]),
      album: _wire2api_opt_Uuid(arr[1]),
      coverArt: _wire2api_opt_Uuid(arr[2]),
      artist: _wire2api_opt_Uuid(arr[3]),
      title: _wire2api_String(arr[4]),
      disk: _wire2api_opt_box_autoadd_i64(arr[5]),
      track: _wire2api_opt_box_autoadd_i64(arr[6]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  UploadReturn _wire2api_upload_return(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UploadReturn(
      uuid: _wire2api_Uuid(arr[0]),
    );
  }
}

// Section: api2wire

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class MioGluePlatform extends FlutterRustBridgeBase<MioGlueWire> {
  MioGluePlatform(ffi.DynamicLibrary dylib) : super(MioGlueWire(dylib));

// Section: api2wire

  @protected
  wire_ArcRwLockMioClientState api2wire_ArcRwLockMioClientState(
      ArcRwLockMioClientState raw) {
    final ptr = inner.new_ArcRwLockMioClientState();
    _api_fill_to_wire_ArcRwLockMioClientState(raw, ptr);
    return ptr;
  }

  @protected
  wire_Player api2wire_Player(Player raw) {
    final ptr = inner.new_Player();
    _api_fill_to_wire_Player(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_Uuid(UuidValue raw) {
    return api2wire_uint_8_list(raw.toBytes());
  }

  @protected
  ffi.Pointer<wire_MioClient> api2wire_box_autoadd_mio_client(MioClient raw) {
    final ptr = inner.new_box_autoadd_mio_client_0();
    _api_fill_to_wire_mio_client(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MioPlayer> api2wire_box_autoadd_mio_player(MioPlayer raw) {
    final ptr = inner.new_box_autoadd_mio_player_0();
    _api_fill_to_wire_mio_player(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_Uuid(UuidValue? raw) {
    return raw == null ? ffi.nullptr : api2wire_Uuid(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _ArcRwLockMioClientStateFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ArcRwLockMioClientStatePtr);
  OpaqueTypeFinalizer get ArcRwLockMioClientStateFinalizer =>
      _ArcRwLockMioClientStateFinalizer;
  late final OpaqueTypeFinalizer _PlayerFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_PlayerPtr);
  OpaqueTypeFinalizer get PlayerFinalizer => _PlayerFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_ArcRwLockMioClientState(
      ArcRwLockMioClientState apiObj, wire_ArcRwLockMioClientState wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_Player(Player apiObj, wire_Player wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_box_autoadd_mio_client(
      MioClient apiObj, ffi.Pointer<wire_MioClient> wireObj) {
    _api_fill_to_wire_mio_client(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_mio_player(
      MioPlayer apiObj, ffi.Pointer<wire_MioPlayer> wireObj) {
    _api_fill_to_wire_mio_player(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_mio_client(MioClient apiObj, wire_MioClient wireObj) {
    wireObj.field0 = api2wire_ArcRwLockMioClientState(apiObj.field0);
  }

  void _api_fill_to_wire_mio_player(MioPlayer apiObj, wire_MioPlayer wireObj) {
    wireObj.field0 = api2wire_Player(apiObj.field0);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class MioGlueWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MioGlueWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MioGlueWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  WireSyncReturn wire_new_mio_client() {
    return _wire_new_mio_client();
  }

  late final _wire_new_mio_clientPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_new_mio_client');
  late final _wire_new_mio_client =
      _wire_new_mio_clientPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_new_player(
    ffi.Pointer<wire_MioClient> client,
  ) {
    return _wire_new_player(
      client,
    );
  }

  late final _wire_new_playerPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_MioClient>)>>('wire_new_player');
  late final _wire_new_player = _wire_new_playerPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_MioClient>)>();

  void wire_info_stream__method__MioPlayer(
    int port_,
    ffi.Pointer<wire_MioPlayer> that,
  ) {
    return _wire_info_stream__method__MioPlayer(
      port_,
      that,
    );
  }

  late final _wire_info_stream__method__MioPlayerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MioPlayer>)>>(
      'wire_info_stream__method__MioPlayer');
  late final _wire_info_stream__method__MioPlayer =
      _wire_info_stream__method__MioPlayerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_MioPlayer>)>();

  WireSyncReturn wire_play__method__MioPlayer(
    ffi.Pointer<wire_MioPlayer> that,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_play__method__MioPlayer(
      that,
      id,
    );
  }

  late final _wire_play__method__MioPlayerPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_MioPlayer>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_play__method__MioPlayer');
  late final _wire_play__method__MioPlayer =
      _wire_play__method__MioPlayerPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_MioPlayer>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_pause__method__MioPlayer(
    ffi.Pointer<wire_MioPlayer> that,
  ) {
    return _wire_pause__method__MioPlayer(
      that,
    );
  }

  late final _wire_pause__method__MioPlayerPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_MioPlayer>)>>('wire_pause__method__MioPlayer');
  late final _wire_pause__method__MioPlayer = _wire_pause__method__MioPlayerPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_MioPlayer>)>();

  WireSyncReturn wire_toggle__method__MioPlayer(
    ffi.Pointer<wire_MioPlayer> that,
  ) {
    return _wire_toggle__method__MioPlayer(
      that,
    );
  }

  late final _wire_toggle__method__MioPlayerPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_MioPlayer>)>>('wire_toggle__method__MioPlayer');
  late final _wire_toggle__method__MioPlayer =
      _wire_toggle__method__MioPlayerPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_MioPlayer>)>();

  WireSyncReturn wire_queue__method__MioPlayer(
    ffi.Pointer<wire_MioPlayer> that,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_queue__method__MioPlayer(
      that,
      id,
    );
  }

  late final _wire_queue__method__MioPlayerPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_MioPlayer>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_queue__method__MioPlayer');
  late final _wire_queue__method__MioPlayer =
      _wire_queue__method__MioPlayerPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_MioPlayer>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_unqueue__method__MioPlayer(
    ffi.Pointer<wire_MioPlayer> that,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_unqueue__method__MioPlayer(
      that,
      id,
    );
  }

  late final _wire_unqueue__method__MioPlayerPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  ffi.Pointer<wire_MioPlayer>, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_unqueue__method__MioPlayer');
  late final _wire_unqueue__method__MioPlayer =
      _wire_unqueue__method__MioPlayerPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_MioPlayer>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_stop__method__MioPlayer(
    ffi.Pointer<wire_MioPlayer> that,
  ) {
    return _wire_stop__method__MioPlayer(
      that,
    );
  }

  late final _wire_stop__method__MioPlayerPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_MioPlayer>)>>('wire_stop__method__MioPlayer');
  late final _wire_stop__method__MioPlayer = _wire_stop__method__MioPlayerPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_MioPlayer>)>();

  WireSyncReturn wire_forward__method__MioPlayer(
    ffi.Pointer<wire_MioPlayer> that,
  ) {
    return _wire_forward__method__MioPlayer(
      that,
    );
  }

  late final _wire_forward__method__MioPlayerPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_MioPlayer>)>>('wire_forward__method__MioPlayer');
  late final _wire_forward__method__MioPlayer =
      _wire_forward__method__MioPlayerPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_MioPlayer>)>();

  WireSyncReturn wire_volume__method__MioPlayer(
    ffi.Pointer<wire_MioPlayer> that,
    double volume,
  ) {
    return _wire_volume__method__MioPlayer(
      that,
      volume,
    );
  }

  late final _wire_volume__method__MioPlayerPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_MioPlayer>,
              ffi.Float)>>('wire_volume__method__MioPlayer');
  late final _wire_volume__method__MioPlayer =
      _wire_volume__method__MioPlayerPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_MioPlayer>, double)>();

  WireSyncReturn wire_get_url__method__MioClient(
    ffi.Pointer<wire_MioClient> that,
  ) {
    return _wire_get_url__method__MioClient(
      that,
    );
  }

  late final _wire_get_url__method__MioClientPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_MioClient>)>>('wire_get_url__method__MioClient');
  late final _wire_get_url__method__MioClient =
      _wire_get_url__method__MioClientPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_MioClient>)>();

  void wire_test_set_url__method__MioClient(
    int port_,
    ffi.Pointer<wire_MioClient> that,
    ffi.Pointer<wire_uint_8_list> url,
  ) {
    return _wire_test_set_url__method__MioClient(
      port_,
      that,
      url,
    );
  }

  late final _wire_test_set_url__method__MioClientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MioClient>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_test_set_url__method__MioClient');
  late final _wire_test_set_url__method__MioClient =
      _wire_test_set_url__method__MioClientPtr.asFunction<
          void Function(int, ffi.Pointer<wire_MioClient>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_attempt_signup_and_login__method__MioClient(
    int port_,
    ffi.Pointer<wire_MioClient> that,
    ffi.Pointer<wire_uint_8_list> username,
    ffi.Pointer<wire_uint_8_list> password,
    ffi.Pointer<wire_uint_8_list> password2,
  ) {
    return _wire_attempt_signup_and_login__method__MioClient(
      port_,
      that,
      username,
      password,
      password2,
    );
  }

  late final _wire_attempt_signup_and_login__method__MioClientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_MioClient>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_attempt_signup_and_login__method__MioClient');
  late final _wire_attempt_signup_and_login__method__MioClient =
      _wire_attempt_signup_and_login__method__MioClientPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_MioClient>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_attempt_login__method__MioClient(
    int port_,
    ffi.Pointer<wire_MioClient> that,
    ffi.Pointer<wire_uint_8_list> username,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_attempt_login__method__MioClient(
      port_,
      that,
      username,
      password,
    );
  }

  late final _wire_attempt_login__method__MioClientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_MioClient>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_attempt_login__method__MioClient');
  late final _wire_attempt_login__method__MioClient =
      _wire_attempt_login__method__MioClientPtr.asFunction<
          void Function(int, ffi.Pointer<wire_MioClient>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_albums__method__MioClient(
    int port_,
    ffi.Pointer<wire_MioClient> that,
  ) {
    return _wire_get_albums__method__MioClient(
      port_,
      that,
    );
  }

  late final _wire_get_albums__method__MioClientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MioClient>)>>(
      'wire_get_albums__method__MioClient');
  late final _wire_get_albums__method__MioClient =
      _wire_get_albums__method__MioClientPtr
          .asFunction<void Function(int, ffi.Pointer<wire_MioClient>)>();

  void wire_get_album__method__MioClient(
    int port_,
    ffi.Pointer<wire_MioClient> that,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_get_album__method__MioClient(
      port_,
      that,
      id,
    );
  }

  late final _wire_get_album__method__MioClientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MioClient>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_album__method__MioClient');
  late final _wire_get_album__method__MioClient =
      _wire_get_album__method__MioClientPtr.asFunction<
          void Function(int, ffi.Pointer<wire_MioClient>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_track__method__MioClient(
    int port_,
    ffi.Pointer<wire_MioClient> that,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_get_track__method__MioClient(
      port_,
      that,
      id,
    );
  }

  late final _wire_get_track__method__MioClientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MioClient>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_track__method__MioClient');
  late final _wire_get_track__method__MioClient =
      _wire_get_track__method__MioClientPtr.asFunction<
          void Function(int, ffi.Pointer<wire_MioClient>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_artist__method__MioClient(
    int port_,
    ffi.Pointer<wire_MioClient> that,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_get_artist__method__MioClient(
      port_,
      that,
      id,
    );
  }

  late final _wire_get_artist__method__MioClientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MioClient>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_artist__method__MioClient');
  late final _wire_get_artist__method__MioClient =
      _wire_get_artist__method__MioClientPtr.asFunction<
          void Function(int, ffi.Pointer<wire_MioClient>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_cover_art__method__MioClient(
    int port_,
    ffi.Pointer<wire_MioClient> that,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_get_cover_art__method__MioClient(
      port_,
      that,
      id,
    );
  }

  late final _wire_get_cover_art__method__MioClientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MioClient>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_cover_art__method__MioClient');
  late final _wire_get_cover_art__method__MioClient =
      _wire_get_cover_art__method__MioClientPtr.asFunction<
          void Function(int, ffi.Pointer<wire_MioClient>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_files_at_dir__method__MioClient(
    int port_,
    ffi.Pointer<wire_MioClient> that,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_get_files_at_dir__method__MioClient(
      port_,
      that,
      path,
    );
  }

  late final _wire_get_files_at_dir__method__MioClientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MioClient>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_files_at_dir__method__MioClient');
  late final _wire_get_files_at_dir__method__MioClient =
      _wire_get_files_at_dir__method__MioClientPtr.asFunction<
          void Function(int, ffi.Pointer<wire_MioClient>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_upload_file__method__MioClient(
    int port_,
    ffi.Pointer<wire_MioClient> that,
    ffi.Pointer<wire_uint_8_list> fullpath,
    ffi.Pointer<wire_uint_8_list> dir,
  ) {
    return _wire_upload_file__method__MioClient(
      port_,
      that,
      fullpath,
      dir,
    );
  }

  late final _wire_upload_file__method__MioClientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_MioClient>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_upload_file__method__MioClient');
  late final _wire_upload_file__method__MioClient =
      _wire_upload_file__method__MioClientPtr.asFunction<
          void Function(int, ffi.Pointer<wire_MioClient>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_folders__method__MioClient(
    int port_,
    ffi.Pointer<wire_MioClient> that,
  ) {
    return _wire_get_folders__method__MioClient(
      port_,
      that,
    );
  }

  late final _wire_get_folders__method__MioClientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MioClient>)>>(
      'wire_get_folders__method__MioClient');
  late final _wire_get_folders__method__MioClient =
      _wire_get_folders__method__MioClientPtr
          .asFunction<void Function(int, ffi.Pointer<wire_MioClient>)>();

  void wire_make_dir__method__MioClient(
    int port_,
    ffi.Pointer<wire_MioClient> that,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_make_dir__method__MioClient(
      port_,
      that,
      name,
      path,
    );
  }

  late final _wire_make_dir__method__MioClientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_MioClient>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_make_dir__method__MioClient');
  late final _wire_make_dir__method__MioClient =
      _wire_make_dir__method__MioClientPtr.asFunction<
          void Function(int, ffi.Pointer<wire_MioClient>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  wire_ArcRwLockMioClientState new_ArcRwLockMioClientState() {
    return _new_ArcRwLockMioClientState();
  }

  late final _new_ArcRwLockMioClientStatePtr =
      _lookup<ffi.NativeFunction<wire_ArcRwLockMioClientState Function()>>(
          'new_ArcRwLockMioClientState');
  late final _new_ArcRwLockMioClientState = _new_ArcRwLockMioClientStatePtr
      .asFunction<wire_ArcRwLockMioClientState Function()>();

  wire_Player new_Player() {
    return _new_Player();
  }

  late final _new_PlayerPtr =
      _lookup<ffi.NativeFunction<wire_Player Function()>>('new_Player');
  late final _new_Player = _new_PlayerPtr.asFunction<wire_Player Function()>();

  ffi.Pointer<wire_MioClient> new_box_autoadd_mio_client_0() {
    return _new_box_autoadd_mio_client_0();
  }

  late final _new_box_autoadd_mio_client_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MioClient> Function()>>(
          'new_box_autoadd_mio_client_0');
  late final _new_box_autoadd_mio_client_0 = _new_box_autoadd_mio_client_0Ptr
      .asFunction<ffi.Pointer<wire_MioClient> Function()>();

  ffi.Pointer<wire_MioPlayer> new_box_autoadd_mio_player_0() {
    return _new_box_autoadd_mio_player_0();
  }

  late final _new_box_autoadd_mio_player_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MioPlayer> Function()>>(
          'new_box_autoadd_mio_player_0');
  late final _new_box_autoadd_mio_player_0 = _new_box_autoadd_mio_player_0Ptr
      .asFunction<ffi.Pointer<wire_MioPlayer> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_ArcRwLockMioClientState(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ArcRwLockMioClientState(
      ptr,
    );
  }

  late final _drop_opaque_ArcRwLockMioClientStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ArcRwLockMioClientState');
  late final _drop_opaque_ArcRwLockMioClientState =
      _drop_opaque_ArcRwLockMioClientStatePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ArcRwLockMioClientState(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ArcRwLockMioClientState(
      ptr,
    );
  }

  late final _share_opaque_ArcRwLockMioClientStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_ArcRwLockMioClientState');
  late final _share_opaque_ArcRwLockMioClientState =
      _share_opaque_ArcRwLockMioClientStatePtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_Player(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_Player(
      ptr,
    );
  }

  late final _drop_opaque_PlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_Player');
  late final _drop_opaque_Player =
      _drop_opaque_PlayerPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_Player(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_Player(
      ptr,
    );
  }

  late final _share_opaque_PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_Player');
  late final _share_opaque_Player = _share_opaque_PlayerPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_ArcRwLockMioClientState extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_MioClient extends ffi.Struct {
  external wire_ArcRwLockMioClientState field0;
}

final class wire_Player extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_MioPlayer extends ffi.Struct {
  external wire_Player field0;
}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
