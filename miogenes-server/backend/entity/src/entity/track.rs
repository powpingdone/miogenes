//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "track")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub title: String,
    pub sort_name: Option<String>,
    pub tags: Json,
    pub audio_hash: Vec<u8>,
    pub orig_fname: String,
    pub album: Option<Uuid>,
    pub artist: Option<Uuid>,
    pub cover_art: Option<Uuid>,
    pub owner: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Owner",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
    #[sea_orm(
        belongs_to = "super::cover_art::Entity",
        from = "Column::CoverArt",
        to = "super::cover_art::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CoverArt,
    #[sea_orm(
        belongs_to = "super::artist::Entity",
        from = "Column::Artist",
        to = "super::artist::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Artist,
    #[sea_orm(
        belongs_to = "super::album::Entity",
        from = "Column::Album",
        to = "super::album::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Album,
    #[sea_orm(has_many = "super::join_playlist_track::Entity")]
    JoinPlaylistTrack,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::cover_art::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CoverArt.def()
    }
}

impl Related<super::artist::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Artist.def()
    }
}

impl Related<super::album::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Album.def()
    }
}

impl Related<super::join_playlist_track::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JoinPlaylistTrack.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
