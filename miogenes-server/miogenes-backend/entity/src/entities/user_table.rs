//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "user_table")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub username: String,
    pub password: Vec<u8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::artist_table::Entity")]
    ArtistTable,
    #[sea_orm(has_many = "super::track_table::Entity")]
    TrackTable,
    #[sea_orm(has_many = "super::album_table::Entity")]
    AlbumTable,
    #[sea_orm(has_many = "super::album_art_table::Entity")]
    AlbumArtTable,
}

impl Related<super::artist_table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArtistTable.def()
    }
}

impl Related<super::track_table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrackTable.def()
    }
}

impl Related<super::album_table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AlbumTable.def()
    }
}

impl Related<super::album_art_table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AlbumArtTable.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
