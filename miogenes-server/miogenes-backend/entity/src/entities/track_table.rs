//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "track_table")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub ts: i64,
    pub title: String,
    pub album_art_id: Option<Uuid>,
    pub album_id: Option<Uuid>,
    pub artist_id: Option<Uuid>,
    pub owner: Uuid,
    pub orig_fname: String,
    pub extra_tags: String,
    pub hash: Vec<u8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::album_art_table::Entity",
        from = "Column::AlbumArtId",
        to = "super::album_art_table::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    AlbumArtTable,
    #[sea_orm(
        belongs_to = "super::album_table::Entity",
        from = "Column::AlbumId",
        to = "super::album_table::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    AlbumTable,
    #[sea_orm(
        belongs_to = "super::artist_table::Entity",
        from = "Column::ArtistId",
        to = "super::artist_table::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ArtistTable,
    #[sea_orm(
        belongs_to = "super::user_table::Entity",
        from = "Column::Owner",
        to = "super::user_table::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    UserTable,
}

impl Related<super::album_art_table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AlbumArtTable.def()
    }
}

impl Related<super::album_table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AlbumTable.def()
    }
}

impl Related<super::artist_table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArtistTable.def()
    }
}

impl Related<super::user_table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserTable.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
